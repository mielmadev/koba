// Para compatibilidad futura con Sass: usar map.get en vez de map-get
@use "sass:map";
@use "@estilos/bp" as *;
@use "@estilos/var.scss" as *;
@use "@estilos/mix/mix.scss" as *;

// @include margen-laterales-bp($margen-laterales);
@mixin margen-laterales-bp($mapa) {
  @each $bp, $valor in $mapa {
    @if $bp ==xs {
      margin: #{$valor};
    }

    @else {
      @include bp($bp) {
        margin: #{$valor};
      }
    }
  }
}

// @include altura-encabezado-bp($altura-encabezado);
@mixin altura-encabezado-bp($mapa, $propiedad: height) {
  @each $bp, $valor in $mapa {
    @if $bp ==xs {
      #{$propiedad}: #{$valor};
    }

    @else {
      @include bp($bp) {
        #{$propiedad}: #{$valor};
      }
    }
  }
}


// Mixin para altura del contenido, restando la altura del encabezado
// Uso: @include altura-contenido-bp($mapa-encabezado, height);
@mixin altura-contenido-bp($mapa-encabezado, $propiedad: height) {
  @each $bp, $valor in $mapa-encabezado {
    @if $bp ==xs {
      #{$propiedad}: calc(100vh - #{$valor});
    }

    @else {
      @include bp($bp) {
        #{$propiedad}: calc(100vh - #{$valor});
      }
    }
  }
}

// @include altura-redes-sociales-bp($alturas-redes-sociales);
@mixin altura-redes-sociales-bp($mapa, $propiedad: height) {
  @each $bp, $valor in $mapa {
    @if $bp ==xs {
      #{$propiedad}: #{$valor};
    }

    @else {
      @include bp($bp) {
        #{$propiedad}: #{$valor};
      }
    }
  }
}

// Tamaños responsivos para los SVG de fecha
$fecha-svg-sizes: (
  xs: 1.3em,
  // más pequeño para xs
  md: 2.8em,
  lg: 3.5em
);

@mixin fecha-svg-separador-sizes {
  .fecha-svg-separador svg {
    width: map.get($fecha-svg-sizes, xs);
    max-width: 7vw;
    height: map.get($fecha-svg-sizes, xs);
    max-height: 7vw;
  }

  @each $bp, $size in $fecha-svg-sizes {
    @if $bp !=xs {
      @include bp($bp) {
        .fecha-svg-separador svg {
          width: $size;
          height: $size;
        }
      }
    }
  }
}

// Mixin para propiedad responsiva reutilizable
// Uso: @include prop-bp($mapa, font-size o propiedad);
@mixin prop-bp($mapa, $propiedad) {
  @each $bp, $valor in $mapa {
    @if $bp ==xs {
      #{$propiedad}: #{$valor};
    }

    @else {
      @include bp($bp) {
        #{$propiedad}: #{$valor};
      }
    }
  }
}